--//Initialization
if not game:IsLoaded() then
    game.Loaded:Wait()
end

--//Services
local Player = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local HttpService = game:GetService("HttpService")
local UserInputService = game:GetService("UserInputService")
local MarketplaceService = game:GetService("MarketplaceService")

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/Kinlei/MaterialLua/master/Module.lua"))()
local Lib = Library.Load({
    Title = "Project SCP - Location Assistant",
    Style = 1,
    SizeX = 255,
    SizeY = 255,
    Theme = "Dark",
    ColorOverrides = {
        MainFrame = Color3.fromRGB(25, 25, 25)
    }
})

local Main = Lib.New({
    Title = Player.LocalPlayer.DisplayName
})

local Location = Main.TextField({
    Text = "Location Name:",
    Type = "Default",
    Callback = function(Value)
        return Value
    end,
    Menu = {
        ["Useful areas"] = function()
            Lib.Banner({
                Text = "[SCP-914] [Checkpoints] [Warheads] [SCP Spawns] [Escape points] [Other important locations?]"
            })
        end,
        Information = function()
            Lib.Banner({
                Text = "Input the location name"
            })
        end
    }
})

local Coordinates = Main.TextField({
    Text = "Coordinates:",
    Type = "Default",
    Callback = function(Value)
        return Value
    end,
    Menu = {
        Information = function()
            Lib.Banner({
                Text = "Input the position of the location"
            })
        end,
        ["Copy Coordinates"] = function(self)
            local Cframe = Player.LocalPlayer.Character.HumanoidRootPart.CFrame
            local RoundedCFrame = string.format("%s, %s, %s", math.round(Cframe.X), math.round(Cframe.Y), math.round(Cframe.Z))
            self.SetText(RoundedCFrame)
        end
    }
})

Main.Button({
    Text = "Send",
    Callback = function()
        local Link = "https://discord.com/api/webhooks/855909099317362698/6ouu1LOZZd2uCHxnl5N_soi99Cb5zIi7S8mNQCwZwmw0HPTWDYgIsvPsRFTWdvfXRK2J"
        local Exploit = (syn and not is_sirhurt_closure and not pebc_execute and "Synapse") or (secure_load and "Sentinel") or (pebc_execute and "ProtoSmasher") or (KRNL_LOADED and "Krnl") or ("Unsupported") 
        local SendRequest = (Exploit == "Synapse" and syn.request) or ((Exploit == "Sentinel" or Exploit == "Krnl") and request) or (Exploit == "ProtoSmasher" and http_request)
        local MapID

        if Player.LocalPlayer.PlayerGui.MainUI.Frame.Version.MapId then
            MapID = string.gsub(Player.LocalPlayer.PlayerGui.MainUI.Frame.Version.MapId.Text, "MAP ID:", "")
        else
            MapID = "Game does not support map IDs"
        end

        if Location:GetText() ~= "" and (type(Coordinates:GetText()) == "number" or Coordinates:GetText() ~= "") then
            SendRequest({
                Url = Link,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json",
                },
                Body = HttpService:JSONEncode({
                    ["embeds"] = {{
                        ["title"] = Player.LocalPlayer.Name,
                        ["url"] = string.format("https://www.roblox.com/users/%s/profile/", Player.LocalPlayer.UserId),
                        ["color"] = 3066993,
                        ["fields"] = {
                            {
                                ["name"] = "Location Name:",
                                ["value"] = Location:GetText(),
                                ["inline"] = true
                            },
                            {
                                ["name"] = "Location Coordinates:",
                                ["value"] = Coordinates:GetText(),
                                ["inline"] = true
                            },
                            {
                                ["name"] = "Map ID:",
                                ["value"] = MapID,
                                ["inline"] = true
                            }
                        },
                        ["author"] = {
                            ["name"] = string.format("Assistance Recorded | %s", MarketplaceService:GetProductInfo(game.PlaceId).Name),
                            ["url"] = string.format("https://www.roblox.com/games/%s", game.PlaceId),
                            ["icon_url"] = string.format("https://www.roblox.com/bust-thumbnail/image?userId=%s&width=420&height=420&format=png", Player.LocalPlayer.UserId)
                        },
                        ["footer"] = {
                            ["text"] = os.date("%x Â· %X"),
                            ["icon_url"] = "https://img.icons8.com/pastel-glyph/2x/clock--v2.png"
                        },
                        ["thumbnail"] = {
                            ["url"] = string.format("http://www.roblox.com/Thumbs/Asset.ashx?Width=768&Height=432&AssetID=%s", game.PlaceId)
                        }
                    }}
                })
            })

            Lib.Banner({
                Text = "Your teleport implementation request has been submitted."
            })
        else
            Lib.Banner({
                Text = "Error!"
            })
        end
    end,
    Menu = {
        Information = function()
            Lib.Banner({
                Text = "Send the location info"
            })
        end
    }
})

Main.Button({
    Text = "Destroy GUI",
    Callback = function()
        Lib.Banner({
            Text = "Thanks for helping!"
        })
        wait(5)
        CoreGui["Project SCP - Location Assistant"]:Destroy()
    end
})

UserInputService.InputBegan:Connect(function(Input, GameProcessed)
    if Input.KeyCode == Enum.KeyCode.Minus then
        local Gui = CoreGui["Project SCP - Location Assistant"]
        Gui.Enabled = not Gui.Enabled

        if GameProcessed then
            return
        end
    end
end)
